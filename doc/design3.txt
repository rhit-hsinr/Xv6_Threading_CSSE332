---
Title: Project Milestone 3
Author(s): Richard Hsin, Reilly Mooney, Ben Werdmann
Date: 2/21/2025
---

High level description
======================

We have added two kernel system calls and two user functions. The two kernel system calls are called clone and join while the two user functions are called 
uspork_create and uspork_join.

uspork_create(void(*func)(void*), void *arg, void *stack)
uspork_join(int pid, void **stack)

1. The clone function is used for process creation and essentially imitating a lightweight thread being implemented.
2. The join function is to safely join the thread in the future to avoid memory leaks etc.

The user function allows the user to do a system call through the user function by creating a wrapper around the system calls.

Memory is shared between threads.

The user is responsible for stack creation and managment. 

Thread creation
================

1. The thread is being created in the kernel space where the clone function will take in 3 arguments. The first one being the thread function, second the argument, 
   and third is a pre-malloced stack. The stack will be generated in the userspace function to lessen the burden of the user to malloc each time they want to create 
   thread. The userspace function will have an extra integer argument that can specify the size of the stack.
2. The register that is responsible for influencing where the thread starts will be the epc. 
3. The threads are currently being exited through bruteforce by using exit(0). This will be changed later on to prevent all threads from collapsing due to the exiting 
   of one single thread. A new system call will be created so that the user can exit a thread when need by call.

Memory sharing
===============

1. Each thread has its own stack, but the rest of the memory is shared.
2. Clone shares memory between threads, ensuring that the parent and child threads operate on the same memory space. 
3. Clone calls copypasta, which copies the memory pages of a parent process to a child process. It shares the physical pages by incrmementing reference counts.
4. We were unable to fully implement dynamic memory in our project. 


Test cases
===========

- Describe the test case you used for the creation of the threads.

- Describe the test case you used for testing shared memory between threads.


The user tests are simple tests to test that our functions and theory actually works. Below are the list of tests that we have. (the first letters are lower case)
-	Xv6test
o	This is the simplest test of all. Just a create and a join for some threads. This allows us to know that at least the most simple thread creation and thread joining 
    works. This test case works perfectly.
-	Sharedmem
o	By adding a global variable to increment, two different threads and also just another of the same thread should all be able to access the global variable. Since 
    concurrency locks are not implemented in this project, sleep is used to avoid any concurrency issues. This test case works perfectly.
-	Sbrktest
o	This test case makes a thread call sbrk(4096), which allocates another page when it is a thread already. The test case for this exists since the change has been 
    done to growproc and another function was created to help with the new growproc, but unfortunately it does not work. This test case did not succeed.
-	Gracefulexit
o	This test case is just an extra to show that all the threads can be joined even when waiting for a long time. This test case creates threads and lets the thread 
    print statements. After all the thread have joined, a final print statement inside the main process will check if all of the threads have been joined and exited 
    gracefully by checking the return values. This test case works perfectly.
 


Additional comments
==================

N/A

Grade
======

The grade you believe should be assigned to your group, with some argument as
to why you chose that grade.

We believe that we deserve a 90% for our grade. Results are important, but the process of learning through the materials and understanding them is important as well. 
We have successfully completed milestone 1 and milestone 2 flawlessly without any issues. Milestone 3 was also mostly complete except for the dynamic memory allocation. 
However, failing to dynamically allocate memory wasn't due to us not having tried to tackle the problem, but we just ran out of time. We have used up countless hours 
establishing different functions and modifying existing functions to solve the issue, but it wasn't enough. Nonetheless, we have learned a lot throughout this whole 
project and have demonstrated our results all the way till the end despite someone of us having inconvenient situations. We created unique function names, working system 
calls, simple but extensive tests, and an amazing presentation to showcase our understanding. We believe that our struggle building this project brick by brick from the 
ground up should be meaningful.
